---
# Task file for CIS Controls
# This file is commented to help view what Ansible Automation is doing
#  and under what circumstances./

# Some blocks below have tasks with tags and some without. Blocks of tasks that
#  contain multiple controls have tasks with tags. Blocks that consist of a
#  single control and are just put together for convience sake, do not have
#  sub-block tasks with tags.

# Comments about how the modules are used will become more infrequent as
#  the file goes along to avoid repeating oneself.

  # Let the user know what version of the controls file is running
  # Use a variable so it prints out the correct version.
  - name: Print Header
    debug: msg="CIS Controls for {{ ansible_distribution }} {{ ansible_distribution_major_version }}"

  # Collect the packages installed on the system so we can check agains them later
  - name: Collect package list
    ansible.builtin.package_facts:
      manager: auto
    tags:
      - always

  # Find the minimum UID of the machine for normal acocunts. This varies
  #  between machines and environments, so we pull it from the file it
  #  is supposed to exist in.

#  - name: Determine the Minimum UID for new, non-system, accounts
#    command: "/usr/bin/awk '/^s*UID_MIN/{print $2}' /etc/login.defs"
#    register: min_uid
#    changed_when: min_uid.rc == "2"
#    check_mode: false
#    tags:
#      - always

  # Update the system with security packages using the system's package manager
  #  Only update the system if the 'update_system' variable is set to true
#  - name: 1.9.0 - Ensure updated system
#   ansible.builtin.dnf:
#      name: "*"
#      state: latest
#      security: true
#    when: update_system
#    tags:
#      - 1.9.0


# 1.1.2 Ensure /tmp configured
  # Create and configure the local-fs systemd service file
  - name: "1.1.2.[1-4] Ensure /tmp configured"
    block:
      - name: Get file system
        shell: findmnt -n /tmp | awk '{print $3}'
        check_mode: no
        register: filesystem
        changed_when: false
      - debug:
          var:  filesystem.stdout
      - name: Check /tmp config
        mount:
          path: /tmp
          src: /dev/mapper/system-tmp
          fstype: "{{ filesystem.stdout }}"
          state: present
          opts:  rw,nosuid,nodev,noexec,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota
        register: tmp_conf
      - name: Remount /tmp
        mount:
          path: /tmp
          state: remounted
        when: tmp_conf.changed
    ignore_errors: yes
    tags:
      - 1.1.2.4
      - 1.1.2.1
      - 1.1.2.2
      - 1.1.2.3
      - tmp
      - mount

# 1.1.3 Ensure /var configured
# Ensure nosuid option set on /var partition
# Ensure nodev option set on /var partition
  - name: "1.1.3.2 Ensure nodev option set on /var partition\n
           1.1.3.3 Ensure nosuid option set on /var partition"
    block:
      - name: Get file system
        shell: findmnt -n /var | awk '{print $3}'
        check_mode: no
        register: varsystem
        changed_when: false
      - debug:
          var:  varsystem.stdout
      - name: Check /var config
        mount:
          path: /var
          src: /dev/mapper/system-var
          fstype: "{{ varsystem.stdout }}"
          state: present
          opts:  rw,nosuid,nodev,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota
        register: var_conf
      - name: Remount /var
        mount:
          path: /var
          state: remounted
        when: var_conf.changed
    ignore_errors: yes
    tags:
      - 1.1.3.2
      - 1.1.3.3
      - var
      - mount
  # The /var/tmp directory is a world-writable directory used for temporary storage by all
 # users and some applications.
  - name: "1.1.4.2 Ensure nodev option set on /var/tmp partition\n
           1.1.4.3 Ensure nosuid option set on /var/tmp partition\n
           1.1.4.4 Ensure noexec option set on /var/tmp partition"
    block:
      - name: 1.1.4 Ensure nodev option set on /var/tmp partitions
        shell: |
          mount | grep "on /var" && true || true
        register: vartemp
        changed_when: false
      - name: /var/tmp partitions
        debug:
          msg: "{{ vartemp }}"
    tags:
     - 1.1.4
     - mount
     - var
# 1.1.5 Ensure /var/log configured
# Ensure nosuid option set on /var/log partition
# Ensure nodev option set on /var/log partition
# Ensure noexec option set on /var/log partition
  - name: "1.1.5.2 Ensure nodev option set on /var/log partition\n
           1.1.5.3 Ensure nosuid option set on /var/log partition\n
           1.1.5.4 Ensure noexec option set on /var/log partition"
    block:
      - name: Get file system
        shell: findmnt -n /var/log | awk '{print $3}'
        check_mode: no
        register: varlogsystem
        changed_when: false
      - debug:
          var:  varlogsystem.stdout
      - name: Check /var/log config
        mount:
          path: /var/log
          src: /dev/mapper/system-log
          fstype: "{{ varlogsystem.stdout }}"
          state: present
          opts:  rw,nosuid,nodev,noexec,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota
        register: varlog_conf
      - name: Remount /var/log
        mount:
          path: /var/log
          state: remounted
        when: varlog_conf.changed
    ignore_errors: yes
    tags:
      - 1.1.5
      - var
      - mount
# 1.1.6 Ensure /var/log/audit configured
# Ensure nosuid option set on /var/log/audit partition
# Ensure nodev option set on /var/log/audit partition
# Ensure noexec option set on /var/log/audit partition
  - name: "1.1.6.2 Ensure nodev option set on /var/log/audit partition\n
           1.1.6.3 Ensure nosuid option set on /var/log/audit partition\n
           1.1.6.4 Ensure noexec option set on /var/log/audit partition"
    block:
      - name: Get file system
        shell: findmnt -n /var/log/audit | awk '{print $3}'
        check_mode: no
        register: varauditsystem
        changed_when: false
      - debug:
          var:  varauditsystem.stdout
      - name: Check /var/log/audit config
        mount:
          path: /var/log/audit
          src: /dev/mapper/system-audit
          fstype: "{{ varauditsystem.stdout }}"
          state: present
          opts:  rw,nosuid,nodev,noexec,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota
        register: varaudit_conf
      - name: Remount /var/log/audit
        mount:
          path: /var/log/audit
          state: remounted
        when: varaudit_conf.changed
    ignore_errors: yes
    tags:
      - 1.1.6
      - var
      - mount
# 1.1.7 Ensure /home configured
# Ensure nosuid option set on /home partition
# Ensure nodev option set on /home partition
  - name: "1.1.7.2 Ensure nodev option set on home partition\n
           1.1.7.3 Ensure nosuid option set on home partition"
    block:
      - name: Get file system
        shell: findmnt -n /home | awk '{print $3}'
        check_mode: no
        register: homesystem
        changed_when: false
      - debug:
          var:  homesystem.stdout
      - name: Check /home config
        mount:
          path: /home
          src: /dev/mapper/system-home
          fstype:  "{{ homesystem.stdout }}"
          state: present
          opts: defaults,rw,nosuid,nodev,usrquota,grpquota,relatime
        register: home_conf
      - name: Remount /home
        mount:
          path: /home
          state: remounted
        when: home_conf.changed
    ignore_errors: yes
    tags:
      - 1.1.7
      - var
      - mount

  # /dev/shm does not exist in ansible_mounts so we have to check the
  #  mount command directly. This requires the use of the shell command which
  #  is not ideal.
  # Grep out /dev/shm and see if the given option is set.
  - name: " Ensure /dev/shm is configured\n
           1.1.8.1 Ensure nodev option set on /dev/shm partition\n
           1.1.8.2 Ensure nosuid option set on /dev/shm partition\n
           1.1.8.3 Ensure noexec option set on /dev/shm partition"
    mount:
      name: /dev/shm
      src: tmpfs
      state: mounted 
      fstype: tmpfs
      opts: rw,nosuid,nodev,noexec 
    tags:
      - 1.1.8.1
      - 1.1.8.2
      - 1.1.8.3

  # Find all local filesystem directories and set the sticky bit on world writable ones
#  - name: 1.1.21 - Ensure sticky bit is set on world-writeable directories
#    shell: set -o pipefail ; /usr/bin/df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null | xargs -I '{}' chmod a+t '{}'
#    changed_when: false
#    tags:
#      - 1.1.21

  # Turn off and disable the autofs service using the service module.
  # We check to see if the package that autofs belongs to (convienently called autofs)
  #  exists in the ansible_facts.packages list we gathered early in the play
#  - name: 1.1.9 - disable automounting
#    ansible.builtin.service:
#      name: autofs
#      enabled: false
#      state: stopped
#    when: "'autofs' in ansible_facts.packages"
#    tags:
#      - 1.1.9

  - name: 1.1.9 Disable USB
    script:
      cmd: files/disableusb.sh
    check_mode: false
    tags:
      - 1.1.9 
#  - name: Disable USB storage module
#    ansible.builtin.lineinfile:
#      dest: /etc/modprobe.d/CIS.conf
#      line: "install usb-storage /bin/true"
#      state: present
#      create: true
#      owner: root
#      group: root
#      mode: 0640
#    tags:
#      - 1.1.9

# Control 1.2.1 is system updating. Make sure system is set for some kind of system software update
  #  from a given repo must be signed with the appropriate key
  - name: 1.2.2 - Ensure GPG keys are configured
    block:
      # Replace any instances of gpgcheck with a 1 after it to 'gpgcheck = 1'
      - name: 1.2.2 - set master yum.conf gpgcheck to '1'
        ansible.builtin.replace:
          dest: /etc/yum.conf
          regexp: '^gpgcheck\s*=\s*[^1]*$'
          replace: "gpgcheck = 1"
        when: gpgcheck and ansible_distribution == "RedHat"

      - name: 1.2.2 - set master dnf.conf gpgcheck to '1'
        ansible.builtin.replace:
          dest: /etc/dnf/dnf.conf
          regexp: '^gpgcheck\s*=\s*[^1]*$'
          replace: "gpgcheck=1"
        when: gpgcheck and ansible_distribution == "Oracle"

      # Find all files in /etc/yum.repos.d and add them to a list variable
      - name: 1.2.2 - find all repo files in /etc/yum.repos.d/
        ansible.builtin.find:
          paths: "/etc/yum.repos.d"
          patterns: "*.repo"
        register: yumrepos
        when: gpgcheck is defined and gpgcheck

      # parse the list variable and replace any instances of gpgcheck with a 1 after it to 'gpgcheck = 1'
      - name: 1.2.2 - Set all repos gpgchecks to '1'
        ansible.builtin.replace:
          dest: "{{ item.path }}"
          regexp: '^gpgcheck\s*=\s*[^1]*$'
          replace: gpgcheck = 1
        with_items: "{{ yumrepos.files }}"
        when: gpgcheck is defined and gpgcheck
    tags:
      - 1.2.2
  - name: "1.2.3 | AUDIT | Ensure package manager repositories are configured"
    block:
      - name: "1.2.3 | AUDIT | Ensure package manager repositories are configured | Get repo list"
        ansible.builtin.shell: dnf repolist
        changed_when: false
        failed_when: false
        register: dnf_configured
        check_mode: false

      - name: "1.2.3 | AUDIT | Ensure package manager repositories are configured | Display repo list"
        ansible.builtin.debug:
          msg:
            - "Warning!! Below are the configured repos. Please review and make sure all align with site policy"
            - "{{ dnf_configured.stdout_lines }}"
    tags:
      - 1.2.3 

# AIDE is a file system integrity checker which will document all
  # filesystem changes. It's very noisy on busy systems and should be
  # enabled when you have the sapce and need for it.
  - name: 1.3 - Filesystem integrity checking w/AIDE
    block:
      # use the system package manager to install AIDE
      - name: 1.3.1 Ensure aide is installed
        ansible.builtin.package:
          name: aide
          state: present
        tags:
          - 1.3.1

      # AIDE requires initialization the first time and it takes time on a large system.
      # DUse stat module on the file that should be there if it is set up.
      - name: 1.3.1 - Determine if AIDE has already been initialized
        ansible.builtin.stat:
          path: /var/lib/aide/aide.db.gz
        register: aide_path
        tags:
          - 1.3.1

      - name: 1.3.1 - Set up database file location
        ansible.builtin.replace:
          dest: /etc/aide.conf
          regexp: "^database=file:((?!{{ aide_db_name }}).)*$"
          replace: "database=file:{{ aide_db_name }}"
        tags:
          - 1.3.1

      - name: 1.3.1 - Set up database_out file location
        ansible.builtin.replace:
          dest: /etc/aide.conf
          regexp: "^database_out=file:((?!{{ aide_new_db_name }}).)*$"
          replace: "database_out=file:{{ aide_new_db_name }}"
        tags:
          - 1.3.1

      - name: 1.3.1 - enable gzip compression for database
        ansible.builtin.lineinfile:
          dest: /etc/aide.conf
          regexp: '^gzip_dbout\s*=\s*((?!{{ aide_gzip }}).)*$'
          line: "gzip_dbout={{ aide_gzip }}"
          state: present
        tags:
          - 1.3.1

      # stat returns a lot of information. 'exists' is true if the file exists and 'isreg'
      #  is true if the file is a regular file. If either of these are not true, then
      #  run the initializatoin again.
 #     - name: 1.3.1 - Initialize AIDE if it hasn't been already (/usr/sbin/aide)
 #       command: /usr/sbin/aide --init
 #       when: ( not aide_path.stat.exists or not aide_path.stat.isreg ) and ansible_distribution != "SLES"
 #      register: aide
 #       async: 1200 # 20 minutes until timeout
 #       poll: 0 # run concurrently
 #       tags:
 #         - 1.3.1

 #     - name: Wait for AIDE initialization to complete
 #       ansible.builtin.async_status: jid={{ aide.ansible_job_id }}
 #       register: aide_status
 #       until: aide_status.finished
 #       when: ( not aide_path.stat.exists or not aide_path.stat.isreg ) and ansible_distribution != "SLES"
 #       retries: 300
 #       tags:
 #         - 1.3.1

      # AIDE creates the new database as a different name. Use the copy module with
      #  the remote_src argument to copy the file on the remote machine to another location
      #  on the remote machine.
      - name: 1.3.1 - Move the newly created database into place
        ansible.builtin.copy:
          src: /var/lib/aide/aide.db.new.gz
          remote_src: true
          dest: /var/lib/aide/aide.db.gz
          mode: preserve
        when: ( not aide_path.stat.exists or not aide_path.stat.isreg ) and ansible_distribution != "SLES"
        changed_when: false
        tags:
          - 1.3.1
    ignore_errors: yes
    tags:
      - 1.3.0
# 1.5 Additional Process Hardening
  - name: 1.3.2 Ensure filesystem integrity is regularly checked | Cron
    cron:
      name: Run AIDE integrity check weekly
      user: root
      minute: "0"
      hour: "5"
      day: "*"
      month: "*"
      weekday: "*"
      job: "/usr/sbin/aide --check"
    tags:
      - section1
      - level_1_server
      - level_1_workstation
      - 1.3.2
  - name: 1.3.3 Ensure cryptographic mechanisms are used to protect the integrity of audit tools (Automated)
    ansible.builtin.blockinfile:
      path: /etc/aide.conf 
      block: |
        # Audit Tools 
        /sbin/auditctl p+i+n+u+g+s+b+acl+xattrs+sha512 
        /sbin/auditd p+i+n+u+g+s+b+acl+xattrs+sha512 
        /sbin/ausearch p+i+n+u+g+s+b+acl+xattrs+sha512 
        /sbin/aureport p+i+n+u+g+s+b+acl+xattrs+sha512 
        /sbin/autrace p+i+n+u+g+s+b+acl+xattrs+sha512 
        /sbin/augenrules p+i+n+u+g+s+b+acl+xattrs+sha512
    tags: 
      - section1
      - level_1_server
      - level_1_workstation
      - 1.3.3
  - name: 1.4.2 - Ensure permissions on /etc/crontab
    ansible.builtin.file:
      path: "{{ item }}"
      owner: root
      group: root
      mode: 0600
    with_items:
      - "/boot/grub2/grub.cfg"
      - "/boot/grub2/grubenv"
    tags:
      - 1.4.2
  
  - name: 1.5.2 - Ensure IgnoreRhosts is set
    ansible.builtin.lineinfile:
      path: /etc/systemd/coredump.conf
      line: "ProcessSizeMax=0"
      regexp: '^ProcessSizeMax=\s*[^y]'
    tags:
      - 1.5.2
      
  - name: 1.5.3 - Ensure address space layout reandomization (ASLR) is enabled
      # The sysctl module will set variables in /etc/sysctl.conf and tell sysctl
      #  to reload them immediately if 'reload' is set to 'yes'.
    ansible.builtin.sysctl:
      name: kernel.randomize_va_space
      value: "2"
      reload: true
      state: present
      sysctl_set: true
    tags:
      - 1.5.3


  # 1.6 Additional Process Hardening

#  - name: 1.6.1 - Ensure core dumps are restricted
#    block:
#      # The sysctl module will set variables in /etc/sysctl.conf and tell sysctl
#      #  to reload them immediately if 'reload' is set to 'yes'.
#      - name: 1.6.1 - Ensure core dumps are restricted
#        sysctl:
#          name: fs.suid_dumpable
#          value: "0"
#          state: present
#          reload: true

 #     # The pam_limits module will configure the lines in the limits files.
 #     - name: 1.6.1 - Ensure core limits are set
 #       community.general.pam_limits:
 #         dest: /etc/security/limits.d/CIS.conf
 #         domain: "*"
 #         limit_type: hard
 #         limit_item: core
 #         value: "0"
 #   tags:
 #     - 1.6.1

 # - name: 1.6.2 - Ensure address space layout reandomization (ASLR) is enabled
      # The sysctl module will set variables in /etc/sysctl.conf and tell sysctl
      #  to reload them immediately if 'reload' is set to 'yes'.
 #   ansible.builtin.sysctl:
 #     name: kernel.randomize_va_space
 #     value: "2"
 #     reload: true
 #     state: present
 #     sysctl_set: true
 #   tags:
 #     - 1.6.2







  # 1.6 Mandatory Access Control

  # Use system package manager to remove
  - name: 1.6.1.1 - Ensure SELinux is installed
    ansible.builtin.dnf:
      name:
        - libselinux
        - python3-libselinux
      state: present
    when: selinux is defined and selinux != "Disabled"
    tags:
      - 1.6.1.1
  - name: Enable SELinux
    ansible.posix.selinux:
      policy: targeted
      state: enforcing
  # re-gather system facts in case we installed selinux packages.
  #  If selinux wasn't installed, it will not populate ansible_selinux fact correctly, regathering
  #  will pull it with the right information
    tags:
      - 1.6.1.1

  # Use the replace module to remove any disablment of selinux in grub if
  #  it isn't expressly disabled from a variable
  - name: 1.6.1.2 - Ensure SELinux is not disabled in bootloader configuration 
    block:
    - name: Run grubby
      shell: grubby --update-kernel ALL --remove-args "selinux=0 enforcing=0"
    - name: Ensure SELinux is not disabled in bootloader configuration
      ansible.builtin.replace:
        dest: /etc/default/grub
        regexp: "{{ item }}"
        replace: ""
      with_items:
        - selinux=0
        - enforcing=0
    when: selinux is defined and selinux != "Disabled"
    notify: rebuild grub
    tags:
      - 1.6.1.2

  - name: 1.6.1.4 Ensure the SELinux mode is not disabled
    ansible.builtin.lineinfile:
      dest: /etc/selinux/config 
      regexp: "^SELINUX="
      line: "SELINUX=enforcing"
    tags:
      - 1.6.1.4
  # Let the user know if there are any processes that are not running under the
  #  a selinux context
  - name: 1.6.1.6 - Report on unconfined running services
    block:
      # In RHEL8, all unconfined services run under their own context
      - name: 1.6.1.6 - Generate report on unconfined running services
        shell: /usr/bin/ps -eZ | /usr/bin/grep unconfined_service_t
        register: unconfined_services_out
        when: ansible_selinux.status != "disabled"
        failed_when: unconfined_services_out.rc == "2"
        changed_when: false
        check_mode: false

      # Print any findings to the user
      - name: 1.6.1.6 - Report on unconfined running services to user
        ansible.builtin.debug:
          msg:
            - "Unconfined processes found:"
            - "{{ unconfined_services_out.stdout_lines }}"
        changed_when: true
        when: unconfined_services_out.stdout
    ignore_errors: yes
    tags:
      - 1.6.1.6

  # Use system package manager to remove package
  - name: 1.6.1.7 - Remove setroubleshoot
    ansible.builtin.dnf:
      name: setroubleshoot
      state: absent
    tags:
      - 1.6.1.7

  # Use system package manager to remove package
  - name: 1.6.1.8 - Remove MCS Translation Service
    ansible.builtin.dnf:
      name: mcstrans
      state: absent
    tags:
      - 1.6.1.8


  # 1.8 Warning Banners

  # Use copy module to copy in the appropriate files based on variable and set permissions
  - name: 1.7.1 - Install motd banners
    ansible.builtin.copy:
      src: "{{ motd_file }}"
      dest: /etc/motd
      owner: root
      group: root
      mode: 0644
    tags:
      - 1.7.1
      - 1.7.4

  # Use copy module to copy in the appropriate files based on variable and set permissions
  - name: 1.7.2 - Install issue banners
    ansible.builtin.copy:
      src: "{{ issue_file }}"
      dest: /etc/issue
      owner: root
      group: root
      mode: 0644
    tags:
      - 1.7.2
      - 1.7.5

  # Use copy module to copy in the appropriate files based on variable and set permissions
  - name: 1.7.3 - Install issue.net banners
    ansible.builtin.copy:
      src: "{{ issue_file }}"
      dest: /etc/issue.net
      owner: root
      group: root
      mode: 0644
    tags:
      - 1.7.3
      - 1.7.6

  # add a banner to the login screen if the graphical_interface variable is set to true
  - name: 1.8.2 Ensure GDM banner set up
    ansible.builtin.blockinfile:
      # Add our required pieces to the greeter defaults file
      path: /etc/gdm/greeter.dconf-defaults
      owner: root
      group: root
      mode: 0644
      block: |
        [org/gnome/login-screen]
        banner-message-enable=true
        banner-message-text='Authorized uses only. All activity may be monitored and reported.'
    when: graphical_inteface is defined and graphical_interface
    tags:
      - 1.8.2

  # 1.10 Configure crypto policy
  - name: 1.10.0 - Configure crypto-policy
    block:
      - name: 1.10.0 - Display error if crypto variable violates policy
        ansible.builtin.debug:
          msg:
            - "crypto_policy is set to: {{ crypto_policy }}. Which is not a valid selection."
            - "Valid choices are DEFAULT, FUTURE, and FIPS."
            - "LEGACY selection does not satisfy the control requirement"
            - "Refusing to update crypto_policy information"
        when: crypto_policy is defined and ( crypto_policy != "DEFAULT" and crypto_policy != "FUTURE" and crypto_policy != "FIPS" )

      - name: 1.10.0 - Set crypto-policy to {{ crypto_policy | upper | default('DEFAULT', true) }}
        ansible.builtin.lineinfile:
          path: /etc/crypto-policies/config
          regexp: "^(LEGACY|FUTURE|FIPS|DEFAULT)"
          line: "{{ crypto_policy | upper | default('DEFAULT', true) }}"
        notify: update crypto_policy

      - name: 1.10.0 - Check to see if FIPS mode is already set up if crypto_policy == "FIPS"
        command: /usr/sbin/fips-mode-setup --is-enabled
        register: fips_mode
        when: crypto_policy is defined and crypto_policy == "FIPS"
        failed_when: false
        changed_when: false

      - name: 1.10.0 - Enabling FIPS mode if crypt_policy set to FIPS
        command: /usr/bin/fips-mode-setup --enable
        when: ( crypto_policy is defined and crypto_policy == "FIPS") and fips_mode.rc == "2"
    tags:
      - 1.10.0

 ### Part 2, Services ###

  # RHEL 8 does not distribute ntp any longer, so we are not using the time_server
  #  variable for RHEL8 controls
  - name: 2.1.1 - Verify chrony is  installed
    ansible.builtin.dnf:
      name: "chrony"
      state: present
    tags:
      - 2.1.1

  # Use the template module to deploy the config file for the time sync program
  #  The default file does not have any template variables, but it's there so
  #  they can be added in the future.
  - name: 2.1.2 - Configure chrony
    ansible.builtin.template:
      src: "chrony.conf"
      dest: /etc/chrony.conf
      owner: root
      group: root
      mode: 0644
    notify: restart chronyd
    tags:
      - 2.1.2

  - name: 2.1.3 - configure sysconfig time_server options
    ansible.builtin.template:
      src: "{{ time_service }}d"
      dest: /etc/sysconfig/{{ time_service }}d
      owner: root
      group: root
      mode: 0644
    notify: restart {{ time_service }}d
    tags:
      - 2.1.3
  # Remove old, unused, insecure services


  # This collection of tasks creates a empty list and save it as a fact.
  #  For every item that is encountered (without the tag being skipped),
  #  add a string to the list.
  - name: create empty list for unneeded packages
    ansible.builtin.set_fact:
      unneeded_packages: []
    tags:
      - section2
  - name: 2.2.1 - Remove xinetd service
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'xinetd' ] }}"
    when: tftp_server is defined and not tftp_server
    tags:
      - 2.2.1
  - name: 2.2.2 - Remove avahi; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'avahi' ] + [ 'avahi-autoipd' ] }}"
    tags:
      - 2.2.2
  - name: 2.2.3 - Disable dhcpd server [controlled by host variable dhcp_server]; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'cups' ] }}"
    when: dhcp_server is defined and not dhcp_server
    tags:
      - 2.2.3
  - name: 2.2.4 - Disable dhcpd server [controlled by host variable dhcp_server]; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'dhcp-server' ] }}"
    when: dhcp_server is defined and not dhcp_server
    tags:
      - 2.2.4
  - name: 2.2.5 - Remove bind; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'bind' ] + [ 'unbound' ] }}"
    when: dns_server is defined and not dns_server
    tags:
      - 2.2.5
  - name: 2.2.6 - Remove vsftpd; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'vsftpd' ] }}"
    when: ftp_server is defined and not ftp_server
    tags:
      - 2.2.6
  - name: 2.2.7 - Remove tftp; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'tftp-server' ] + [ 'tftp' ] }}"
    when: ftp_server is defined and not ftp_server
    tags:
      - 2.2.7
      - 2.3.4

  - name: 2.2.8 - Remove httpd; add to removal list
    block:
      - name: 2.2.8 Check is Httpd is operational
        systemd:
          name: httpd.service
        register: httpd_service
        ignore_errors: yes
      - name: show value
        debug:
          var:  httpd_service.status.ActiveState
      - name: Add Httpd to removal list
        ansible.builtin.set_fact:
          unneeded_packages: "{{ unneeded_packages + [ 'httpd' ] + [ 'httpd-tools' ] + [ 'mod_ssl' ] }}"
        when: http_server is defined and not http_server and httpd_service.status.ActiveState == "inactive"
    tags:
      - 2.2.8
  - name: 2.2.9 - Remove dovecot; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'dovecot' ] + [ 'cyrus-imapd' ] }}"
    when: email_server is defined and not email_server
    tags:
      - 2.2.9
  - name: 2.2.10 - Remove samba; add to removal list
    block:
      - name: 2.2.10 Check is Samba is operational
        systemd:
          name: smbd.service
        register: smbd_service
        ignore_errors: yes
      - name: 2.2.10 Check for log files  
        find:
          paths: /var/log/samba/ 
          age: -7d
          recurse: yes
        register: smbd_logs
      - name: 2.2.10 Cheking for Samba logs
        debug:
          var: smbd_logs.matched
      - name: 2.2.10 Cheking for Samba service 
        debug:
          var: smbd_service.status.ActiveState
      - name: 2.2.10 - Remove samba; add to removal list
        ansible.builtin.set_fact:
          unneeded_packages: "{{ unneeded_packages + [ 'samba' ] }}"
        when: smb_server is defined and not smb_server and smbd_service.status.ActiveState == "inactive" and smbd_logs.matched == 0
    tags:
      - 2.2.10
  - name: 2.2.11 - Remove squid; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'squid' ] }}"
    tags:
      - 2.2.11
  - name: 2.2.12 - Remove snmp; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'net-snmp' ] }}"
    tags:
      - 2.2.12
#  - name: 2.2.15 - Remove ypserv; add to removal list
#    ansible.builtin.set_fact:
#      unneeded_packages: "{{ unneeded_packages + [ 'ypserv' ] }}"
#    tags:
#      - 2.2.15
  - name: 2.2.13 - Remove telnet; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'telnet' ] }}"
    tags:
      - 2.3.1
      - 2.2.13
  - name: 2.2.14 - Remove dnsmasq; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'dnsmasq' ] }}"
    tags:
      - 2.2.14
  - name: 2.2.[16-17] - Remove nfs server; add to removal list
    block:
      - name: 2.2.[16-17] Check for nfs in /etc/fstab
        shell: grep nfs /etc/fstab
        register: nfs_mp
        ignore_errors: yes
      - name: 2.2.[16-17] Check for nfs shares
        shell: nfsstat -m
        register: nfs_shares
        ignore_errors: yes
      - name: 2.2.[16-17] Fstab result
        debug:
          var: nfs_mp.stdout
      - name: 2.2.[16-17] Nfs shares found
        debug:
          var: nfs_shares.stdout
      - name: 2.2.[16-17] Remove nfs server; add to removal list
        ansible.builtin.set_fact:
          unneeded_packages: "{{ unneeded_packages + [ 'nfs-utils' ] + [ 'rpcbind' ] }}"
        when: nfs_mp.stdout | length == 0 and nfs_shares.stdout | length == 0
    tags:
      - 2.2.16
      - 2.2.17
      - section2
  - name: 2.2.18 - Remove rsync; add to removal list
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'rsync' ] }}"
    tags:
      - 2.2.18
  - name: 2.3.2 - Ensure LDAP client is not installed
    ansible.builtin.set_fact:
      unneeded_packages: "{{ unneeded_packages + [ 'openldap-clients' ] }}"
    tags:
      - 2.3.2
  - name: 2.[2-3] - list of packages to remove
    ansible.builtin.debug:
      var: unneeded_packages
    tags:
      - section2

  # With the list complete, use it with the system's package manager
  #  to remove packages from the system that are not needed.
  - name: Process removal list
    ansible.builtin.dnf:
      name: "{{ unneeded_packages }}"
      state: absent

  # Cups should be remove per control 2.2.16, but it may not be able to due to
  #  dependencies, so disable the service instead


  # Use the stat module to determine if the mail server config file exists.
  #  If it does and we are to be a mail server, then modify it per the control.
  - name: 2.2.15 - Configure email for local-only mode if mail software is installed and not intending to be an external email relay (mail_server=false)
    block:
      - name: 2.2.15 - Find if we have a mail agent config file
        ansible.builtin.stat:
          path: /etc/postfix/main.cf
        register: postfix_out
        changed_when: false
      - name: 2.2.15 - If the file exists and not a mail server, then set loopback only
        ansible.builtin.lineinfile:
          dest: /etc/postfix/main.cf
          regexp: "^inet_interfaces"
          line: "inet_interfaces = loopback-only"
        when: postfix_out.stat.exists and not email_server
        notify: restart postfix
    tags:
      - 2.2.15
  - name: "2.4 | AUDIT | Ensure nonessential services listening on the system are removed or masked"
    block:
      - name: "2.4 | AUDIT | Ensure nonessential services listening on the system are removed or masked | Get list of services"
        ansible.builtin.shell: systemctl list-units --type=service
        changed_when: false
        failed_when: false
        check_mode: false
        register: rhel9cis_2_4_services

      - name: "2.4 | AUDIT | Ensure nonessential services listening on the system are removed or masked | Get list of sockets"
        ansible.builtin.shell: systemctl list-units --type=sockets
        changed_when: false
        failed_when: false
        check_mode: false
        register: rhel9cis_2_4_sockets

      - name: "2.4 | AUDIT | Ensure nonessential services listening on the system are removed or masked | Display list of services"
        ansible.builtin.debug:
          msg:
            - "Warning!! Below are the list of services and sockets, both active and inactive"
            - "Please review to make sure all are essential"
            - "{{ rhel9cis_2_4_services.stdout_lines }}"
            - "{{ rhel9cis_2_4_sockets.stdout_lines }}"
    ignore_errors: yes
    tags:
      - 2.4
  # Section 3, Network parameters

  # The sysctl module will configure certain sysctl parameters. They are
  #  collected into a loop here to speed the implementation
  # Once complete, notify the system to flush the network routes
  #
  - name: 3.1.1 - Disable IPv6
    block:
      - name: 3.1.1 - Find if IPv6 is currently in the grub file, shows changed when it is in the file
        ansible.builtin.lineinfile:
          path: /etc/default/grub
          regexp: '^\s*GRUB_CMDLINE_LINUX.*ipv6.disable=1'
          state: absent
        check_mode: true
        changed_when: false
        register: ipv6_disable_grub
        failed_when: false
      - name: 3.6 - Disable IPv6 in grub
        ansible.builtin.replace:
          path: /etc/default/grub
          regexp: '^GRUB_CMDLINE_LINUX="'
          replace: 'GRUB_CMDLINE_LINUX="ipv6.disable=1 '
        notify: rebuild grub
        when: not ipv6_disable_grub.found and ipv6_disable
    tags:
      - 3.1.1

  - name: 3.1.2 - Disable Wifi
    script:
      cmd: files/disablewifi.sh
    check_mode: false
    tags:
      - 3.1.2
  - name: 3.2.1 - Set networking parameters for host only communications
    block:
      - name: Check for runing docker
        systemd:
          name: docker.service
        register: docker_service
        ignore_errors: yes
      - name: Docker service status
        debug:
          var: docker_service.status.ActiveState
      - name: 3.2.1 - Set ipv4 networking parameters (OFF)
        ansible.builtin.sysctl:
          name: "{{ item }}"
          value: "0"
          reload: true
          state: present
          sysctl_set: true
        loop:
          - net.ipv4.conf.all.forwarding # (3.1.1)
          - net.ipv6.conf.all.forwarding # (3.1.1)
          - net.ipv4.ip_forward
        when: docker_service.status.ActiveState == "inactive"
      - name: 3.2.1 - Set ipv6 networking parameters (OFF)
        ansible.builtin.sysctl:
          name: "{{ item }}"
          value: "0"
          reload: true
          state: present
          sysctl_set: true
        loop:
          - net.ipv6.conf.all.forwarding # (3.1.1)
        when: not ipv6_disable
        notify: flush network routes
    tags:
      - 3.2.1
  - name: 3.2.1.1 - Set ipv4 networking parameters (OFF)
    block:
      - name:  Set in the running configuration 
        ansible.builtin.sysctl:
          name: "{{ item }}"
          value: "0"
          reload: true
          state: present
          sysctl_set: true
        loop:
          - net.ipv4.conf.all.send_redirects # (3.2.1)
          - net.ipv4.conf.default.send_redirects # (3.2.1)
#      - name: set in a kernel parameter configuration file
#        ansible.builtin.lineinfile:
#          path: /etc/sysctl.d/99-gfk-custom.conf
#          regexp: '^127\.0\.0\.1'
#          line: "{{ item }}"
#        with_items:
#          - "net.ipv4.ip_forward = 0"

    notify: flush network routes
    tags:
      - 3.2.1.1
  - name: 3.3. - Set networking parameters for host as router communications
    block:
      - name: 3.3.[1-3] - Set ipv4 network parameters (OFF)
        ansible.builtin.sysctl:
          name: "{{ item }}"
          value: "0"
          reload: true
          state: present
          sysctl_set: true
        loop:
          - net.ipv4.conf.all.accept_source_route # (3.2.1)
          - net.ipv4.conf.default.accept_source_route # (3.2.1)
          - net.ipv4.conf.all.accept_redirects # (3.2.2)
          - net.ipv4.conf.default.accept_redirects # (3.2.2)
          - net.ipv4.conf.all.secure_redirects # (3.2.3)
          - net.ipv4.conf.default.secure_redirects # (3.2.3)
        notify: flush network routes

      - name: 3.3.[4-8] - Set ipv4 networking parameters (ON)
        ansible.builtin.sysctl:
          name: "{{ item }}"
          value: "1"
          reload: true
          state: present
          sysctl_set: true
        loop:
          - net.ipv4.conf.all.log_martians # (3.2.4)
          - net.ipv4.conf.default.log_martians # (3.2.4)
          - net.ipv4.icmp_echo_ignore_broadcasts # (3.2.5)
          - net.ipv4.icmp_ignore_bogus_error_responses # (3.2.6)
          - net.ipv4.conf.all.rp_filter # (3.2.7)
          - net.ipv4.conf.default.rp_filter # (3.2.7)
          - net.ipv4.tcp_syncookies # ( 3.2.8)
        notify: flush network routes

      - name: 3.3.9 - Set ipv6 networking parameters (OFF)
        ansible.builtin.sysctl:
          name: "{{ item }}"
          value: "0"
          reload: true
          state: present
          sysctl_set: true
        loop:
          - net.ipv6.conf.all.accept_source_route # (3.2.1)
          - net.ipv6.conf.default.accept_source_route # (3.2.1)
          - net.ipv6.conf.all.accept_redirects # (3.2.2)
          - net.ipv6.conf.default.accept_redirects # (3.2.2)
          - net.ipv6.conf.all.accept_ra # (3.2.9)
          - net.ipv6.conf.default.accept_ra # (3.2.9)
        notify: flush network routes
        when: not ipv6_disable
    tags:
      - 3.3.0

  # With the list complete, use it with the system's package manager
  #  to remove packages from the system that are not needed.
  - name: 3.3.7 Ensure Reverse Path Filtering is enabled 
    ansible.builtin.lineinfile:
      dest: /usr/lib/sysctl.d/50-default.conf
      regex: "net.ipv4.conf.default.rp_filter"
      line: "net.ipv4.conf.default.rp_filter = 1"
    tags:
      - 3.3.7 

  # Section 3 - Firewall

  - name: 3.4.1 - Install firewall package
    block:
    - name: 3.4.1.1 - Install firewalld
      ansible.builtin.dnf:
        name: "firewalld"
        state: present
      notify: start firewalld # 3.4.2.1
    - name: Enable and start firewalld
      ansible.builtin.service:
        name: firewalld
        enabled: true
        state: started
    - name: 3.4.2.2 - Disable iptables service
      ansible.builtin.service:
        name: iptables
        state: stopped
        enabled: false
        masked: true
      ignore_errors: true
      failed_when: false

    - name: 3.4.2.3 - Disable netfilters service
      ansible.builtin.systemd:
        name: nftables
        state: stopped
        enabled: false
        masked: true
      when: "'nftables' in ansible_facts.packages"

    - name: 3.4.1.5 - Set default zone
      ansible.builtin.lineinfile:
          path: "/etc/firewalld/firewalld.conf"
          regexp: '^DefaultZone\s*((?!{{ firewalld_default_zone }}).)*$'
          line: "DefaultZone={{ firewalld_default_zone }}"
      when: firewalld_default_zone is defined
      notify: restart firewalld

    # 3.4.2.5 Ensure network interfaces are assigned to appropriate zone is machine dependent
    # 3.4.2.6 Ensure unnecessary services and ports are not accepted

    - name: Notify users to configure the firewall
      ansible.builtin.debug:
        msg:
          - "3.4.2.7 - Ensure default firewalld policy must be handled locally"
    when: firewall is defined and firewall == "firewalld"
    tags:
      - 3.4.1
      - 3.4.2
  - name: 3.4.2.4 Ensure host based firewall loopback traffic is configured
    script:
      cmd: files/loop_traf.sh
    check_mode: false
    tags:
      - 3.4.2.4

  # Section 4 - Logging and Auditing
 # Section 4, Logging
  - name: 4.2.1.1 - Ensure rsyslog is installed
    ansible.builtin.dnf:
      name: rsyslog
      state: present
    tags:
      - 4.2.1.1

  - name: 4.2.1.2 - Enable Rsyslog
    ansible.builtin.service:
      name: rsyslog
      enabled: true
    tags:
      - 4.2.1.2
  - name: "4.2.1.3 | PATCH | Ensure journald is configured to send logs to rsyslog"
    ansible.builtin.lineinfile:
      path: /etc/systemd/journald.conf
      regexp: "^#ForwardToSyslog=|^ForwardToSyslog="
      line: ForwardToSyslog=yes
    notify: Restart rsyslog
    tags:
      - 4.2.1.3
  - name: 4.2.1.4 - Ensure rsyslog default file permissions are configured
    ansible.builtin.lineinfile:
      path: /etc/rsyslog.conf
      regexp: '^\$FileCreateMode\s+0640'
      line: "$FileCreateMode 0640"
      create: true
      owner: root
      group: root
      mode: 0644
      state: present
    tags:
      - 4.2.1.4
#  - name: "4.2.1.7 | PATCH | Ensure rsyslog is not configured to recieve logs from a remote client"
#    block:
#      - name: "4.2.1.7 | PATCH | Ensure rsyslog is not configured to recieve logs from a remote client. | When not log host"
#        ansible.builtin.replace:
#          path: /etc/rsyslog.conf
#          regexp: '{{ item }}'
#          replace: '#\1'
#        notify: Restart rsyslog
#        loop:
#          - '^(\$ModLoad imtcp)'
#          - '^(\$InputTCPServerRun)'
#          - '^(module\(load="imtcp"\))'
#          - '^(input\(type="imtcp")'
#      - name: "4.2.1.7 | PATCH | Ensure rsyslog is not configured to recieve logs from a remote clients. | When log host"
#        ansible.builtin.replace:
#          path: /etc/rsyslog.conf
#          regexp: '^#(.*{{ item }}.*)'
#          replace: '\1'
#        notify: Restart rsyslog
#        loop:
#          - 'ModLoad imtcp'
#          - 'InputTCPServerRun'
#    tags:
#      - 4.2.1.7
  # Control 4.2.1.5 - Ensure rsyslog is configured to send logs to a remote log host is machine dependent
  # skipping

  - name: 4.2.2.2 - Configure journald
    block:
      - name: Ensure Journald is installed
        ansible.builtin.dnf:
          name: systemd-journald
          state: present
        ignore_errors: yes
      - name: Enable Journald
        ansible.builtin.service:
          name: systemd-journald
          enabled: true
      - name: Find any rsyslog files where all logs are being forwarded to a loghost
        shell: /usr/bin/grep -l -s "^*.*[^I][^I]*@" /etc/rsyslog.conf /etc/rsyslog.d/*.conf
        register: rsyslog_forward_out
        changed_when: false
        failed_when: rsyslog_forward_out.rc == "2"
        check_mode: false

      - name: 4.2.2.5 - Forward journald logs to rsyslog IF rsyslog is sending logs to a log host
        ansible.builtin.lineinfile:
          dest: /etc/systemd/journald.conf
          regexp: "^ForwardToSyslog=((?!yes).)*$"
          line: "ForwardToSyslog=yes"
          insertafter: "#ForwardToSyslog=no"
        when: rsyslog_forward_out.stdout
    tags:
      - 4.2.2.5

  - name: 4.2.2.3 - Ensure journald compresses large files
    ansible.builtin.lineinfile:
      dest: /etc/systemd/journald.conf
      regexp: "^Compress=((?!yes).)*$"
      line: "Compress=yes"
      insertafter: "^#Compress="
    tags:
      - 4.2.2.3

  - name: 4.2.2.4 - Ensure journald writes to peristent disk
    ansible.builtin.lineinfile:
      dest: /etc/systemd/journald.conf
      regexp: "^Storage=((?!persistent).)*$"
      line: "Storage=persistent"
      insertafter: "^#Storage="
    tags:
      - 4.2.2.4
  - name: "4.2.2.7 | AUDIT | Ensure journald default file permissions configured"
    block:
      - name: "4.2.2.7 | AUDIT | Ensure journald default file permissions configured | Check for override file"
        ansible.builtin.stat:
          path: /etc/tmpfiles.d/systemd.conf
        register: rhel9cis_4_2_2_7_override

      - name: "4.2.2.7 | AUDIT | Ensure journald default file permissions configured | Set live file"
        ansible.builtin.set_fact:
          systemd_conf_file: /etc/tmpfiles.d/systemd.conf
        when: rhel9cis_4_2_2_7_override.stat.exists

      - name: "4.2.2.7 | PATCH | Ensure journald default file permissions configured | Set permission"
        ansible.builtin.lineinfile:
          path: "{{ systemd_conf_file | default('/usr/lib/tmpfiles.d/systemd.conf') }}"
          regexp: '^z \/var\/log\/journal\/%m\/system.journal (!?06(0|4)0) root'
          line: 'z /var/log/journal/%m/system.journal 0640 root systemd-journal - -'
    tags:
      - 4.2.2.7
  # Control 4.2.3, Ensure permissions on log files are configured, is machine dependant
  # skipping
  - name: "4.2.3 Ensure permissions on all logfiles are configured"
    shell: find /var/log/ -type f -perm /g+wx,o+rwx -exec chmod g-wx,o-rwx "{}" +
    changed_when: false    
    ignore_errors: yes
    tags:
      - 4.2.3
  - name: 4.2.3 set Sysstats logs permissions
    ansible.builtin.replace:
      path: /etc/sysconfig/sysstat
      replace: "UMASK=0027"
      regexp: '^\s*UMASK=0022'
    tags:
      - 4.2.3

  # 4.3 - Ensure logrotate is configured skipped as machine and environment dependent


  # This control is early in order to create the files. This will
  # make sure they are available when cron starts
  - name: Remove /etc/cron.deny
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - /etc/cron.deny
      - /etc/at.deny
    tags:
      - 5.1.8
      - 5.1.9
  - name: Create the cron/at allow files (5.1.8)
    ansible.builtin.copy:
      dest: "{{ item }}"
      content: ""
      force: false
      owner: root
      group: root
      mode: 0644
    with_items:
      - /etc/cron.allow
      - /etc/at.allow
    tags:
      - 5.1.8
      - 5.1.9
  - name: 5.1.1 - Ensure cron is enabled
    ansible.builtin.service:
      name: crond
      enabled: true
      state: started
    when: "'cronie' in ansible_facts.packages"
    tags:
      - 5.1.1

  - name: 5.1.2 - Ensure permissions on /etc/crontab
    ansible.builtin.file:
      path: /etc/crontab
      owner: root
      group: root
      mode: 0600
    tags:
      - 5.1.2

  - name: 5.1.[3-7] - Ensure permissions on crontab directories
    ansible.builtin.file:
      path: "{{ item }}"
      owner: root
      group: root
      mode: 0600
    loop:
      - /etc/cron.hourly
      - /etc/cron.daily
      - /etc/cron.weekly
      - /etc/cron.monthly
      - /etc/cron.d
    tags:
      - 5.1.3
      - 5.1.4
      - 5.1.5
      - 5.1.6
      - 5.1.7

  # Restrict at/cron skipped (5.1.8) as is rarely used and environment dependent

  # If you want to deploy your own SSH config file, exclude the entire 5.2.0 tag
  - name: 5.2 - SSH File configurations
    block:
      - name: 5.2.1 - Set permissions on SSH file
        ansible.builtin.file:
          dest: /etc/ssh/sshd_config
          owner: root
          group: root
          mode: 0600
        tags:
          - 5.2.1

      # Control 5.2.2, Ensure SSH access is limited is environment dependent
      # skipping

      - name: 5.2.2 - Set Permissions on ssh private host keys
        block:
          - name: 5.2.2 - Find all ssh private host keys
            ansible.builtin.find:
              paths: /etc/ssh
              file_type: file
              patterns: ssh_host_*_key
            register: ssh_host_out
            changed_when: false

          - name: 5.2.2 - Set permissions on all ssh private host keys (Red Hat set the group to ssh_keys and mode to 640)
            ansible.builtin.file:
              dest: "{{ item.path }}"
              owner: root
              group: ssh_keys 
              mode: 0600
            loop: "{{ ssh_host_out.files }}"
        tags:
          - 5.2.2

      - name: 5.2.3 - Set Permissions on ssh public host keys
        block:
          - name: 5.2.3 - Find all ssh public host keys
            ansible.builtin.find:
              paths: /etc/ssh
              file_type: file
              patterns: ssh_host_*_key.pub
            register: ssh_hostpub_out
            changed_when: false

          - name: 5.2.3 - Set permissions on all ssh public host keys
            ansible.builtin.file:
              dest: "{{ item.path }}"
              owner: root
              group: root
              mode: 0644
            loop: "{{ ssh_hostpub_out.files }}"
        tags:
          - 5.2.3
      - name: 5.2.4 Ensure SSH access is limited
        block:
          - name: 5.2.4 Ensure SSH access is limited | allow groups
            lineinfile:
              state: present
              dest: /etc/ssh/sshd_config
              regexp: "^AllowGroups"
              line: "AllowGroups {{ allowed_groups }}"
            register: ssh_config4
            when:
              - allowed_groups != "None"
          - name: 5.2.4 Ensure SSH access is limited | denyusers
            lineinfile:
              state: present
              dest: /etc/ssh/sshd_config
              regexp: "^DenyUsers"
              line: "DenyUsers {{ deny_users }}"
            register: ssh_config4
            when:
              - deny_users != "None"
          - name: 5.2.4 Ensure SSH access is limited | denygroups
            lineinfile:
              state: present
              dest: /etc/ssh/sshd_config
              regexp: "^DenyGroups"
              line: "DenyGroups games"
        tags:
          - section5
          - level_1_server
          - level_1_workstation
          - 5.2.4
      - name: 5.2.5 - Set LogLevel to {{ ssh_log_level }} or more verbose, but not debug
        ansible.builtin.replace:
          path: /etc/ssh/sshd_config
          replace: "LogLevel {{ ssh_log_level | upper }}"
          regexp: '^LogLevel\s*(QUIET|FATAL|ERROR|DEBUG)*$'
        notify:  restart sshd
        when: ssh_log_level == "INFO" or ssh_log_level == "WARN"
        tags:
          - 5.2.5
      - name: 5.2.6 - Ensure SSH is configured to use PAM
        ansible.builtin.lineinfile:
          path: "/etc/ssh/sshd_config"
          line: "UsePAM yes"
          regexp: '^UsePAM\s+[yes|no]'
        notify: restart sshd
        tags:
          - 5.2.6
      - name: 5.2.8 - Ensure HostbasedAuthentication is disabled
        ansible.builtin.lineinfile:
          path: /etc/ssh/sshd_config
          line: "HostbasedAuthentication no"
          regexp: '^HostbasedAuthentication\s*[^n]'
        notify: restart sshd
        tags:
          - 5.2.8
      - name: 5.2.9 - Ensure SSH PermitEmptyPasswords is disabled
        ansible.builtin.lineinfile:
          path: /etc/ssh/sshd_config
          state: absent
          regexp: '^PermitEmptyPasswords\s*[^n]'
        notify: restart sshd
        tags:
          - 5.2.9
      - name: 5.2.10 - Ensure PermitUserEnvironment is disabled
        ansible.builtin.lineinfile:
          path: /etc/ssh/sshd_config
          state: absent
          regexp: '^PermitUserEnvironment\s*[^n]'
        notify: restart sshd
        tags:
          - 5.2.10
      - name: 5.2.11 - Ensure IgnoreRhosts is set
        ansible.builtin.lineinfile:
          path: /etc/ssh/sshd_config
          line: "IgnoreRhosts yes"
          regexp: '^IgnoreRhosts\s*[^y]'
        notify: restart sshd
        tags:
          - 5.2.11
      - name: 5.2.15 - Ensure SSH Banner is configured
        ansible.builtin.lineinfile:
          path: "/etc/ssh/sshd_config"
          line: "Banner /etc/{{ ssh_login_banner }}"
          regexp: "^Banner /etc/{{ ssh_login_banner }}"
        notify: restart sshd
        tags:
          - 5.2.15
      - name: 5.2.16 - Ensure SSH MaxAuthTires is set to {{ ssh_max_auth_tries }} or less
        ansible.builtin.lineinfile:
          path: /etc/ssh/sshd_config
          line: "MaxAuthTries {{ ssh_max_auth_tries }}"
          regexp: '^MaxAuthTries\s*[^1-{{ ssh_max_auth_tries | int + 1 }}]'
          insertafter: "^#MaxAuthTries"
        notify: restart sshd
        tags:
          - 5.2.16
      - name: 5.2.17 - Limit max unauthenticated startups
        ansible.builtin.lineinfile:
          path: "/etc/ssh/sshd_config"
          line: "MaxStartups 10:30:60"
          regexp: '^MaxStartups\s+'
        notify: restart sshd
        tags:
          - 5.2.17
      - name: 5.2.18 - Limit max sessions
        ansible.builtin.lineinfile:
          path: "/etc/ssh/sshd_config"
          line: "MaxSessions {{ ssh_max_sessions }}"
          regexp: '^MaxSessions\s+'
        notify: restart sshd
        tags:
          - 5.2.18
      - name: 5.2.19 - Ensure SSH LoginGraceTime is set to {{ ssh_grace_time }} or less
        ansible.builtin.lineinfile:
          path: /etc/ssh/sshd_config
          line: "LoginGraceTime {{ ssh_grace_time }}"
          regexp: "^LoginGraceTime"
          insertafter: "^#LoginGraceTime"
        notify: restart sshd
        tags:
          - 5.2.19   
      - name: 5.2.20 - Ensure SSH Idle Timeout is configured ClientAliveInterval
        ansible.builtin.lineinfile:
          path: /etc/ssh/sshd_config
          line: "ClientAliveInterval {{ ssh_alive_interval9 }}"
          regexp: "^ClientAliveInterval"
          insertafter: "^#ClientAliveInterval"
        notify: restart sshd
        tags:
          - 5.2.20

      - name: 5.2.20 - Ensure SSH Idle Timeout is configured ClientAliveCountMax
        ansible.builtin.lineinfile:
          path: /etc/ssh/sshd_config
          line: "ClientAliveCountMax {{ ssh_alive_count_max9 }}"
          regexp: "^ClientAliveCountMax"
          insertafter: "^#ClientAliveInterval"
        notify: restart sshd
        tags:
          - 5.2.20

  # use the system package module to ensure sudo is installed
  - name: 5.3.1 - Ensure sudo is installed
    ansible.builtin.dnf:
      name: sudo
      state: present
    tags:
      - 5.3.1

  # Make sure the sudoers file includes the requirement to use pty
  - name: 5.3.2 - Ensure sudo commands use pty
    ansible.builtin.lineinfile:
      path: /etc/sudoers
      regexp: '^Defaults\s*use_pty'
      line: "Defaults use_pty"
      insertafter: "^# Defaults specification"
      validate: /usr/sbin/visudo -cf %s
    tags:
      - 5.3.2

  # Make sure the sudoers file includes the requirement to log to a file
  - name: 5.3.3 - Ensure sudo log file exists
    ansible.builtin.lineinfile:
      path: /etc/sudoers
      regexp: '^Defaults\s*logfile="{{ sudo_log }}"'
      line: 'Defaults logfile="{{ sudo_log }}"'
      insertafter: "^# Defaults specification"
      validate: /usr/sbin/visudo -cf %s
    tags:
      - 5.3.3
  - name: "5.3.7 | PATCH | Ensure access to the su command is restricted"
    block:
      - name: "5.3.7 | PATCH | Ensure access to the su command is restricted | Ensure sugroup exists"
        ansible.builtin.group:
          name: sugroup
          state: present

      - name: "5.3.7 | PATCH | Ensure access to the su command is restricted | remove users from group"
        ansible.builtin.lineinfile:
          path: /etc/group
          regexp: '^sugroup(:.:.*:).*$'
          line: 'sugroup\g<1>'
          backrefs: true

      - name: "5.3.7 | PATCH | Ensure access to the su command is restricted | Setting pam_wheel to use_uid"
        ansible.builtin.lineinfile:
          path: /etc/pam.d/su
          regexp: '^(#)?auth\s+required\s+pam_wheel\.so'
          line: 'auth           required        pam_wheel.so use_uid group=sugroup'
    tags:
      - 5.3.7
  - name: "5.4.2 | PATCH | Ensure authselect includes with-faillock | with auth select profile"
    block:
#      - name: Create custom profile
#        ansible.builtin.shell: "authselect create-profile rhel9 -b sssd --symlink-meta --symlink-pam"
#        ignore_errors: yes
      - name: "5.4.2 | AUDIT | Ensure authselect includes with-faillock | Gather profiles and enabled features"
        ansible.builtin.shell: "authselect current | grep with-faillock"
        failed_when: false
        changed_when: false
        check_mode: false
        register: rhel9cis_5_4_2_profiles_faillock

      - name: "5.4.2 | AUDIT | Ensure authselect includes with-faillock | Show profiles"
        ansible.builtin.debug:
          msg:
            - "Below are the current custom profiles"
            - "{{ rhel9cis_5_4_2_profiles_faillock.stdout_lines }}"
      - name: "5.4.2 Authselect enable feature with-faillock on current profile"
        ansible.builtin.shell: "authselect enable-feature with-faillock"
      - name: "5.4.2  Authselect apply changes"
        ansible.builtin.shell: "authselect apply-changes"
    ignore_errors: yes
    tags:
      - 5.4.2

  - name: 5.5.1 - Configure PAM files and password requirements
    block:
      - name: 5.5.1 - require at least one digit in passwords
        ansible.builtin.lineinfile:
          path: /etc/security/pwquality.conf
          line: dcredit = -1
          regexp: "^dcredit = -1"
          insertafter: "# dcredit = 0"
        when: password_req_digit

      - name: 5.5.1 - require at least one uppercase letter in passwords
        ansible.builtin.lineinfile:
          path: /etc/security/pwquality.conf
          line: ucredit = -1
          regexp: "^ucredit = -1"
          insertafter: "# ucredit = 0"
        when: password_req_upper

      - name: 5.5.1 - require at least one lowercase letter in passwords
        ansible.builtin.lineinfile:
          path: /etc/security/pwquality.conf
          line: lcredit = -1
          regexp: "^lcredit = -1"
          insertafter: "^# lcredit = 0"
        when: password_req_lower

      - name: 5.5.1 - Require at least one special character in passwords
        ansible.builtin.lineinfile:
          path: /etc/security/pwquality.conf
          line: ocredit = -1
          regexp: "^ocredit = -1"
          insertafter: "^# ocredit = 0"
        when: password_req_digit

      - name: 5.5.1 - Require at least {{ password_min_length }} characters in passwords
        ansible.builtin.lineinfile:
          path: /etc/security/pwquality.conf
          line: minlen = {{ password_min_length }}
          regexp: "^minlen = {{ password_min_length }}"
          insertafter: "^# minlen = 8"
        when: password_req_digit
    tags:
      - 5.5.1
  - name: 5.5.2 - Ensure lockout for failed password attempts is configured 
    block:
      - name: add deny
        ansible.builtin.lineinfile:
          dest: /etc/security/faillock.conf
          line: "deny = 5"
          regexp: "^deny"
          state: present
      - name: 5.5.2 add unlock_time
        ansible.builtin.lineinfile:
          dest: /etc/security/faillock.conf
          line: "unlock_time = 900"
          regexp: "^unlock_time"
          state: present
    tags:
      - 5.5.2
  - name: 5.5.3/5.5.4 PAM checks
    ansible.builtin.lineinfile:
      dest: /etc/pam.d/system-auth
      regexp: '^password\s+sufficient.*(pam_pwhistory\.so|pam_unix\.so)(.*)$'
      line: "password    sufficient    pam_unix.so yescrypt shadow nullok use_authtok remember=5 sha512"
      insertafter: '^password\s+requisite'
      state: present
    tags:
      - 5.5.3
      - 5.5.4
  - name: 5.5.3 Ensure password reuse is limited | update file according to CIS
    replace:
      dest: /etc/pam.d/system-auth
      replace: "password    sufficient    pam_unix.so yescrypt shadow nullok use_authtok remember=5 sha512"
      regexp: '^password\s+sufficient.*(pam_pwhistory\.so|pam_unix\.so)(.*)$'
      after: '^password\s+requisite'
    tags:
      - 5.5.3
  - name: 5.5.4 - Verify password hashing algorithm is sha512
    block:
      - name: 5.5.3/5.5.4 PAM checks
        ansible.builtin.lineinfile:
          dest: /etc/pam.d/password-auth
          regexp: '^password\s+sufficient.*(pam_pwhistory\.so|pam_unix\.so)(.*)$'
          line: "password    sufficient    pam_unix.so yescrypt shadow nullok use_authtok remember=5 sha512"
          insertafter: '^password\s+requisite'
          state: present
      - name: 5.5.4 Ensure password reuse is limited | update /etc/pam.d/system-auth 
        replace:
          dest: /etc/pam.d/system-auth
          replace: "password    sufficient    pam_unix.so yescrypt shadow nullok use_authtok remember=5 sha512"
          regexp: '^password\s+sufficient.*(pam_pwhistory\.so|pam_unix\.so)(.*)$'
          after: '^password\s+requisite'
      - name: 5.5.4 Ensure password reuse is limited | update /etc/pam.d/password-auth
        replace:
          dest: /etc/pam.d/password-auth
          replace: "password    sufficient    pam_unix.so yescrypt shadow nullok use_authtok remember=5 sha512"
          regexp: '^password\s+sufficient.*(pam_pwhistory\.so|pam_unix\.so)'
          after: '^password\s+requisite'

      - name: 5.5.4 Setting password hashing algorithm is sha512 / libuser.conf
        replace:
          dest: /etc/libuser.conf
          replace: "crypt_style = sha512"
          regexp: '^crypt_style\s+=(.*)$'
      - name: 5.5.4 Setting password hashing algorithm is sha512 / /etc/login.defs
        replace:
          dest: /etc/login.defs
          replace: "ENCRYPT_METHOD SHA512"
          regexp: '^ENCRYPT_METHOD\s+(.*)$'
    tags:
      - 5.5.4
  - name: 5.6.1.2 - Ensure password change days is set to {{ password_min_days }}
    block:
      - name: set to {{ password_min_days }} in config
        ansible.builtin.lineinfile:
          dest: /etc/login.defs
          regexp: '^PASS_MIN_DAYS'
          line: "PASS_MIN_DAYS  {{ password_min_days9 }}"
          state: present
      - name:  5.6.1.2 - Ensure password change days is set to {{ password_min_days }}
        command: "chage --mindays {{ pass_min_days }} {{ item }}"
        loop: "{{ list_of_os_users}}"
    ignore_errors: yes
    tags:
      - 5.6.1.2
  - name: 5.6.1.3 - Ensure password warning days is set to {{ password_warning_days }}
    ansible.builtin.lineinfile:
      dest: /etc/login.defs
      regexp: '^PASS_WARN_AGE\s*((?!{{ password_warning_days }}).)*$'
      line: "PASS_WARN_AGE  {{ password_warning_days }}"
      state: present
    tags:
      - 5.6.1.3
  - name: 5.6.1.5 Ensure all users last password change date is in the past
    block:
      - name: 5.6.1.5 Ensure all users last password change date is in the past | get list
        shell: |
          awk -F: '{print $1}' /etc/shadow | while read -r user
          do
            if [[ $(date --date="$(chage --list "$user" | grep '^Last password change' | cut -d: -f2)" +%s) > $(date +%s) ]];then
              echo "$user"
            fi
          done
        register: output_5_6_1_5
        changed_when: false
      - name: 5.6.1.5 Ensure all users last password change date is in the past | save list
        copy:
          dest: "{{ outputfiles }}/5.6.1.5"
          content: "{{ output_5_6_1_5.stdout_lines }}"
    ignore_errors: yes
    tags:
    - 5.6.1.5
  - name: 5.6.3 - Ensure default shell timeout is {{ shell_timeout }} seconds or less
    ansible.builtin.lineinfile:
      dest: "{{ item }}"
      regexp: '^readonly\s*((?!TMOUT=900 ; export TMOUT).)*$'
      line: "readonly TMOUT={{ shell_timeout }} ; export TMOUT"
#      marker: "# {mark} Ansible Managed CIS Timeout"
    loop:
#      - /etc/bashrc
      - /etc/profile
    tags:
      - 5.6.3

  # Control is actually setting to GID of 0 and the user module takes a group name, not a GID, so have to use usermod
  - name: 5.6.4 - Ensure default group for root is GID 0
    command: /usr/sbin/usermod -g 0 root
    changed_when: false
    tags:
      - 5.6.4

  - name: 5.6.5 - Ensure umask is set
    ansible.builtin.replace:
      path: "{{ item }}"
      replace: "     umask {{ default_umask }}"
      regexp: '^\s*umask\s*022'
    loop:
      - /etc/bashrc
      - /etc/profile
    tags:
      - 5.6.5

  # 5.5.6,  Ensure root login is restricted to system console
  # not easily automatable because of the various TTYs on a machine
  # Manually verify that only physically secure TTYs are listed  in
  # /etc/securetty

  - name: 5.7 - Restrict su to wheel group
    block:
      - name: 5.7 - Configure PAM to only allow su from wheel group
        ansible.builtin.replace:
          path: /etc/pam.d/su
          regexp: '^#auth\s+required\s+pam_wheel.so\s+use_uid'
          replace: "auth         required        pam_wheel.so use_uid"

      - name: 5.7 - Add root to the wheel group
        ansible.builtin.user:
          name: root
          groups: wheel
          append: true
    tags:
      - 5.7.0

  # Section 6 - System Maintenance

  # Control 6.1.1 - Audit system file permissions, the report is time consuming and requires manual review
  # skipping
  # Control 6.1.2,  Ensure sticky bit is set on all world-writable directories
  # providing a list to the user here.
  - name: 6.1.[1-4] - Ensure permissions on /etc/passwd- /etc/[g]shadow- /etc/group-
    ansible.builtin.file:
      path: /etc/{{ item }}
      owner: root
      group: root
      mode: 0644
    with_items:
      - passwd
      - passwd-
      - group
      - group-
    tags:
      - 6.1.1
      - 6.1.2
      - 6.1.3
      - 6.1.4
#  - name: 6.1.[5-8] - Ensure permissions on /etc/shadow /etc/shadow~ /etc/gshadow /etc/gshadow~
#      path: /etc/{{ item }}
#      owner: root
#      group: root
#      mode: 0000
#    loop:
#      - gshadow-
#      - shadow-
#      - shadow
#      - gshadow
#    tags:
 #     - 6.1.5
#      - 6.1.6
#      - 6.1.7
#      - 6.1.8
  - name: 6.1.9 - Ensure no world writable files exist
    block:
      - name: 6.1.9 - Find any world writiable files
        shell: "/usr/bin/df --local -P | /usr/bin/awk {' if (NR!=1) print $6'} | /usr/bin/xargs -I '{}' find '{}' -xdev -type f -perm -0002"
        register: ww_files
        changed_when: false
        check_mode: false

      - name: 6.1.9 - Print any world writable files found
        ansible.builtin.debug:
          msg: "World writiable files found: {{ ww_files.stdout }}"
        changed_when: true
        when: ww_files.stdout
    tags:
      - 6.1.9
  - name: 6.1.10 - Ensure no unowned files exist
    block:
      - name: 6.1.10 - Find any unowned files
        shell: "/usr/bin/df --local -P | /usr/bin/awk {' if (NR!=1) print $6'} | /usr/bin/xargs -I '{}' find '{}' -xdev -nouser"
        register: uo_files
        changed_when: false
        check_mode: false

      - name: 6.1.10 - Print any unowned files found
        ansible.builtin.debug:
          msg: "unowned files found: {{ uo_files.stdout }}"
        changed_when: true
        when: uo_files.stdout
    tags:
      - 6.1.10
  - name: 6.1.11 - Ensure no ungrouped files exist
    block:
      - name: 6.1.11 - Find any ungrouped files
        shell: "/usr/bin/df --local -P | /usr/bin/awk {' if (NR!=1) print $6'} | /usr/bin/xargs -I '{}' find '{}' -xdev -nogroup"
        register: ug_files
        changed_when: false
        check_mode: false

      - name: 6.1.11 - Print any ungrouped files found
        ansible.builtin.debug:
          msg: "ungrouped files found: {{ uo_files.stdout }}"
        changed_when: true
        when: ug_files.stdout
    tags:
      - 6.1.11
  - name: 6.1.12 - Ensure sticky bit is set on all world-writable directories
    block:
      - name: 6.1.12 - Find any world writiable files directories
        shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null
        register: ww_dirs
        changed_when: false
        check_mode: false

      - name: 6.1.12 - Print any world writable directories found
        ansible.builtin.debug:
          msg: "World writiable files found: {{ ww_dirs.stdout }}"
        changed_when: true
        when: ww_dirs.stdout
      - name: 6.1.12 Remove any world writiable files directories
        shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null | xargs -I '{}' chmod a+t '{}'
    ignore_errors: yes
    tags:
      - 6.1.12
  - name: 6.2.1 - Ensure password fields are not empty
    block:
      - name: 6.2.1 - Check to see if there are any accounts with empty passwords
        shell: awk -F':' '($2 != "x" ) { print $1 " is not set to shadowed passwords "}' /etc/passwd
        changed_when: false
        register: passwd_passwords
        check_mode: false
      - name: 6.2.1 - Report the named users to the report
        ansible.builtin.debug:
          msg: "The user {{ item }} has an empty password"
        when: passwd_passwords.stdout
        changed_when: true
        loop: "{{ passwd_passwords.stdout_lines }}"
    tags:
      - 6.2.1

  - name: 6.2.2 - Ensure password fields are not empty
    block:
      - name: 6.2.2 - Check to see if there are any accounts with empty passwords
        shell: "/usr/bin/cat /etc/shadow | awk -F: '($2 == \"\" ) { print $1 }'"
        changed_when: false
        register: empty_passwords
        check_mode: false
      - name: 6.2.2 - Report the named users to the report
        ansible.builtin.debug:
          msg: "The user {{ item }} has an empty password"
        when: empty_passwords.stdout
        changed_when: true
        loop: "{{ empty_passwords.stdout_lines }}"
    tags:
      - 6.2.2
  - name: 6.2.3 - Report on groups in /etc/passwd  with a GID not in /etc/group
    block:
      - name: 6.2.3 - Use script to pull the list of groups
        script:
          cmd: files/undefined_groups.sh
        register: undefined_groups
        changed_when: false
        check_mode: false
      - name: 6.2.3 - Report to user any unreferenced groups
        ansible.builtin.debug:
          msg: "{{ undefined_groups.stdout_lines }}"
        changed_when: true
        when: undefined_groups.stdout
    tags:
      - 6.2.3  
  - name: 6.2.4 - Report on duplicate UIDs in /etc/passwd
    block:
      - name: 6.2.4 - Use script to pull the list of duplicate UIDs
        script:
          cmd: files/duplicate_uids.sh
        register: duplicate_uids
        changed_when: false
        check_mode: false

      - name: 6.2.4 - Print report of duplicated UIDs to user
        ansible.builtin.debug:
          msg: "{{ duplicate_uids.stdout_lines }}"
        changed_when: true
        when: duplicate_uids.stdout
    tags:
      - 6.2.4

  - name: 6.2.5 - Report on duplicate GIDs in /etc/group
    block:
      - name: 6.2.5 - Use script to pull the list of duplicate GIDs
        script:
          cmd: files/duplicate_guids.sh
        register: duplicate_guids
        changed_when: false
        check_mode: false

      - name: 6.2.5 - Print report of duplcate GIDs to user
        ansible.builtin.debug:
          msg: "{{ duplicate_guids.stdout_lines }}"
        changed_when: true
        when: duplicate_guids.stdout
    tags:
      - 6.2.5
  - name: 6.2.6 - Report on duplicate users in /etc/passwd
    block:
      - name: 6.2.6 - Use script to pull the list of users
        script:
          cmd: files/duplicate_users.sh
        register: duplicate_users
        changed_when: false
        check_mode: false
      - name: 6.2.6 - Print report of duplicate users to user
        ansible.builtin.debug:
           msg: "{{ duplicate_users.stdout_lines }}"
        changed_when: true
        when: duplicate_users.stdout
    tags:
      - 6.2.6
  - name: 6.2.7 - Report on duplicate groups in /etc/group
    block:
      - name: 6.2.7 - Use script to pull the list of groups
        script:
          cmd: files/duplicate_groups.sh
        register: duplicate_groups
        changed_when: false
        check_mode: false

      - name: 6.2.7 - Print report of duplicate groups to user
        ansible.builtin.debug:
          msg: "{{ duplicate_groups.stdout_lines }}"
        changed_when: true
        when: duplicate_groups.stdout
    tags:
      - 6.2.7
  - name: 6.2.8 - Ensure root PATH integrity
    block:
      - name: 6.2.8 - Run script on path variable
        script: files/path_check.sh
        changed_when: false
        register: path_check
        check_mode: false

      - name: 6.2.8 - Print report to user
        ansible.builtin.debug:
          msg:
            - "Note, Ansible runs this as SUDO with the ansible user's PATH variable. The script may not print issues"
            - "that exist in root's path because of this. It should be run as root on the target machine manually."
            - " {{ path_check.stdout }}"
        when: path_check.stdout and not ansible_check_mode
    tags:
      - 6.2.8

  - name: 6.2.9 - Report on multiple accounts with UID of 0
    block:
      - name: 6.2.9 - find accounts with UID of 0
        shell: "/usr/bin/cat /etc/passwd | awk -F: '($3 == 0) { print $1 }'"
        register: rootuid
        changed_when: rootuid.rc == 2
        check_mode: false

      - name: 6.2.9 - Report on mulitple accounts with UID of 0
        ansible.builtin.debug:
          msg:
            - "Accounts with UID zero in addition to root"
            - " {{ rootuid.stdout_lines }}"
        changed_when: true
        when: rootuid.stdout != 'root'
    tags:
      - 6.2.9
  - name: 6.2.10 Ensure all users' home directories exist
    block:
      - name: 6.2.10 Ensure all users' home directories exist | list
        shell: |
          grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while
          read -r user dir
          do
              if [ ! -d "$dir" ]; then
                  echo "${user}"
              fi
          done
        register: output_6_2_10
        changed_when: false
      - name: 6.2.10 Ensure all users' home directories exist | save
        copy:
          dest: "{{ outputfiles }}/6.2.10"
          content: "{{ output_6_2_10.stdout_lines }}"
      - name: 6.2.10 Ensure all users' home directories exist | fix
        user:
          name: "{{ item }}"
          create_home: yes
        with_items: "{{ output_6_2_10.stdout_lines }}"
        when: output_6_2_10.stdout_lines|length > 0 
    ignore_errors: yes
    tags:
      - 6.2.10
  - name: "6.2.12 | PATCH | Ensure local interactive user home directories are mode 750 or more restrictive"
    block:
      - name: "6.2.12 | AUDIT | Ensure local interactive user home directories are mode 750 or more restrictive | get stat"
        ansible.builtin.stat:
          path: "/home/{{ item }}"
        register: rhel_09_6_2_12_home_dir_perms
        loop: "{{ output_6_2_10.stdout_lines }}"
        when: output_6_2_10.stdout_lines|length > 0 
      - name: "6.2.12 | PATCH | Ensure local interactive user home directories are mode 750 or more restrictive | amend if needed"
        ansible.builtin.file:
          path: "{{ item.stat.path }}"
          state: directory
          mode: "0750"
        loop: "{{ rhel_09_6_2_12_home_dir_perms.results }}"
        loop_control:
          label: "{{ item }}"
        when:
          - item.stat.mode > '0750'
        ignore_errors: yes
      - name: "6.2.12 | PATCH | Ensure local interactive user home directories are mode 750 or more restrictive | Set group ACL"
        ansible.posix.acl:
          path: "/home/{{ item }}"
          default: true
          etype: group
          permissions: rx
          state: present
        loop: "{{ output_6_2_10.stdout_lines }}"
        ignore_errors: yes
      - name: "6.2.12 | PATCH | Ensure local interactive user home directories are mode 750 or more restrictive | Set other ACL"
        ansible.posix.acl:
          path: "/home/{{ item }}"
          default: true
          etype: other
          permissions: 0
          state: present
        loop: "{{ output_6_2_10.stdout_lines }}"
        ignore_errors: yes
    tags:
       - 6.2.12

  - name: "6.2.13 | PATCH | Ensure no local interactive user has .netrc files"
    ansible.builtin.file:
        path: "/home/{{ item }}/.netrc"
        state: absent
    loop: "{{ output_6_2_10.stdout_lines }}"
    tags:
      - 6.2.13
  - name: "6.2.14 | PATCH | Ensure no local interactive user has .forward files"
    ansible.builtin.file:
        path: "/home/{{ item }}/.forward"
        state: absent
    loop: "{{ output_6_2_10.stdout_lines }}"
    tags:
      - 6.2.14

  - name: "6.2.15 | PATCH | Ensure no local interactive user has .rhosts files"
    ansible.builtin.file:
        path: "~{{ item }}/.rhosts"
        state: absent
    loop: "{{ output_6_2_10.stdout_lines }}"
    tags:
      - 6.2.15

  - name: "6.2.16 | PATCH | Ensure local interactive user dot files are not group or world writable"
    block:
        - name: "6.2.16 | AUDIT | Ensure local interactive user dot files are not group or world writable | Check for files"
          ansible.builtin.find:
              path: /home
              depth: 3
              patterns: ".*"
              hidden: true
              recurse: true
              file_type: file
          register: user_dot_files

        - name: "6.2.16 | AUDIT | Ensure local interactive user dot files are not group or world writable | update permissions"
          ansible.builtin.file:
              path: "{{ item.path }}"
              mode: go-w
#              follow: "{{ rhel_09_6_2_16_home_follow_symlinks }}"
          loop: "{{ user_dot_files.files }}"
          loop_control:
              label: "{{ item.path }}"
    tags:
      - 6.2.16 


  - name: Add hardening file.
    file:
      path: /etc/.hardening
      state: touch
      owner: root
      group: root
      mode: '0400'
    tags:
      - hard

